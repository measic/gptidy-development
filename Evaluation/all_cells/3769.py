with HDF5TableWriter(filename=dl1_parameters_filename, group_name='events', overwrite=True) as writer:    source = event_source(infile)    source.allowed_tels = allowed_tels    source.max_events = max_events    for i, event in enumerate(source):        if i%100==0:            print(i)        cal(event)        for telescope_id, dl1 in event.dl1.tel.items():            tel = event.inst.subarray.tels[telescope_id]            camera = tel.camera            image = dl1.image            peakpos = dl1.pulse_time            data = torch.tensor([image, peakpos], dtype=torch.float).unsqueeze(0)            prediction = regression_network(data).squeeze(0).detach().numpy()            particle_prediction = classification_network(data)            particle = torch.max(particle_prediction, 1)[1]            ## Fill container ##            dl1_container.fill_mc(event)            dl1_container.fill_event_info(event)            dl1_container.set_mc_core_distance(event, telescope_id)            dl1_container.set_source_camera_position(event, telescope_id)                        event.dl2.energy['gl'].energy = 10**prediction[0] * units.TeV            event.dl2.shower['gl'].core_x = prediction[1] * units.km            event.dl2.shower['gl'].core_y = prediction[2] * units.km            event.dl2.shower['gl'].alt = prediction[3] * units.rad            event.dl2.shower['gl'].az = prediction[4] * units.rad            event.dl2.classification['gl'].prediction = particle.item()            ## Save parameters for later training ##            writer.write(camera.cam_id, [dl1_container, event.dl2.energy['gl'], event.dl2.shower['gl'],                                        event.dl2.classification['gl']])                                